PReP (PowerPC Reference Platform) boot partition is the first partition used in
PowerPC platform for containing the bootable kernel or bootloader. The firmware
searches for this partition and jumps to it for booting. So far no GUID was
specified for this partition type and hence booting from GPT disk was not
supported on this platform. A new GUID 9e1a2d38-c612-4316-aa26-8b49521e5a8b for
PReP partition is proposed to be included in GPT.

(Backported from mainline d151cc20af79c89383ffacc89c1f646f831fc3e6)
---

diff -rupN a/doc/parted.texi b/doc/parted.texi
--- a/doc/parted.texi	2014-03-19 14:09:38.521111861 -0400
+++ b/doc/parted.texi	2014-03-19 14:09:28.241061304 -0400
@@ -1091,7 +1091,7 @@ physical volume.
 by the Linux/PA-RISC boot loader, palo.
 
 @item PREP
-(MS-DOS) - this flag can be enabled so that the partition can be used
+(MS-DOS, GPT) - this flag can be enabled so that the partition can be used
 as a PReP boot partition on PowerPC PReP or IBM RS6K/CHRP hardware.
 
 @end table
diff -rupN a/libparted/labels/gpt.c b/libparted/labels/gpt.c
--- a/libparted/labels/gpt.c	2014-03-19 14:09:38.491117204 -0400
+++ b/libparted/labels/gpt.c	2014-03-19 14:09:28.211057478 -0400
@@ -139,6 +139,10 @@ typedef struct
     ((efi_guid_t) { PED_CPU_TO_LE32 (0x5265636F), PED_CPU_TO_LE16 (0x7665), \
                     PED_CPU_TO_LE16 (0x11AA), 0xaa, 0x11, \
                     { 0x00, 0x30, 0x65, 0x43, 0xEC, 0xAC }})
+#define PARTITION_PREP_GUID \
+    ((efi_guid_t) { PED_CPU_TO_LE32 (0x9e1a2d38), PED_CPU_TO_LE16 (0xc612), \
+                    PED_CPU_TO_LE16 (0x4316), 0xaa, 0x26, \
+                    { 0x8b, 0x49, 0x52, 0x1e, 0x5a, 0x8b }})
 
 struct __attribute__ ((packed)) _GuidPartitionTableHeader_t
 {
@@ -279,6 +283,7 @@ typedef struct _GPTPartitionData
   int atvrecv;
   int msftrecv;
   int legacy_boot;
+  int prep;
 } GPTPartitionData;
 
 static PedDiskType gpt_disk_type;
@@ -799,6 +804,7 @@ _parse_part_entry (PedDisk *disk, GuidPa
     = gpt_part_data->hidden = gpt_part_data->msftres
     = gpt_part_data->msftrecv
     = gpt_part_data->legacy_boot
+    = gpt_part_data->prep
     = gpt_part_data->bios_grub = gpt_part_data->atvrecv = 0;
 
   if (pte->Attributes.RequiredToFunction & 0x1)
@@ -822,6 +828,8 @@ _parse_part_entry (PedDisk *disk, GuidPa
     gpt_part_data->msftrecv = 1;
   else if (!guid_cmp (gpt_part_data->type, PARTITION_APPLE_TV_RECOVERY_GUID))
     gpt_part_data->atvrecv = 1;
+  else if (!guid_cmp (gpt_part_data->type, PARTITION_PREP_GUID))
+    gpt_part_data->prep = 1;
 
   return part;
 }
@@ -1331,6 +1339,7 @@ gpt_partition_new (const PedDisk *disk,
   gpt_part_data->msftrecv = 0;
   gpt_part_data->atvrecv = 0;
   gpt_part_data->legacy_boot = 0;
+  gpt_part_data->prep = 0;
   uuid_generate ((unsigned char *) &gpt_part_data->uuid);
   swap_uuid_and_efi_guid ((unsigned char *) (&gpt_part_data->uuid));
   memset (gpt_part_data->name, 0, sizeof gpt_part_data->name);
@@ -1418,6 +1427,11 @@ gpt_partition_set_system (PedPartition *
       gpt_part_data->type = PARTITION_RAID_GUID;
       return 1;
     }
+  if (gpt_part_data->prep)
+    {
+      gpt_part_data->type = PARTITION_PREP_GUID;
+      return 1;
+    }
   if (gpt_part_data->boot)
     {
       gpt_part_data->type = PARTITION_SYSTEM_GUID;
@@ -1548,6 +1562,7 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->hp_service
           = gpt_part_data->msftres
           = gpt_part_data->msftrecv
+          = gpt_part_data->prep
           = gpt_part_data->atvrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_BIOS_GRUB:
@@ -1559,6 +1574,7 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->hp_service
           = gpt_part_data->msftres
           = gpt_part_data->msftrecv
+          = gpt_part_data->prep
           = gpt_part_data->atvrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_RAID:
@@ -1570,6 +1586,7 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->hp_service
           = gpt_part_data->msftres
           = gpt_part_data->msftrecv
+          = gpt_part_data->prep
           = gpt_part_data->atvrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_LVM:
@@ -1581,6 +1598,7 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->hp_service
           = gpt_part_data->msftres
           = gpt_part_data->msftrecv
+          = gpt_part_data->prep
           = gpt_part_data->atvrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_HPSERVICE:
@@ -1592,6 +1610,7 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->bios_grub
           = gpt_part_data->msftres
           = gpt_part_data->msftrecv
+          = gpt_part_data->prep
           = gpt_part_data->atvrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_MSFT_RESERVED:
@@ -1603,6 +1622,7 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->bios_grub
           = gpt_part_data->hp_service
           = gpt_part_data->msftrecv
+          = gpt_part_data->prep
           = gpt_part_data->atvrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_DIAG:
@@ -1614,6 +1634,7 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->bios_grub
           = gpt_part_data->hp_service
           = gpt_part_data->msftres
+          = gpt_part_data->prep
           = gpt_part_data->atvrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_APPLE_TV_RECOVERY:
@@ -1625,8 +1646,21 @@ gpt_partition_set_flag (PedPartition *pa
           = gpt_part_data->bios_grub
           = gpt_part_data->hp_service
           = gpt_part_data->msftres
+          = gpt_part_data->prep
           = gpt_part_data->msftrecv = 0;
       return gpt_partition_set_system (part, part->fs_type);
+    case PED_PARTITION_PREP:
+      gpt_part_data->prep = state;
+      if (state)
+        gpt_part_data->boot
+          = gpt_part_data->raid
+          = gpt_part_data->lvm
+          = gpt_part_data->bios_grub
+          = gpt_part_data->hp_service
+          = gpt_part_data->msftres
+          = gpt_part_data->msftrecv
+          = gpt_part_data->atvrecv = 0;
+      return gpt_partition_set_system (part, part->fs_type);
     case PED_PARTITION_HIDDEN:
       gpt_part_data->hidden = state;
       return 1;
@@ -1671,6 +1705,8 @@ gpt_partition_get_flag (const PedPartiti
       return gpt_part_data->hidden;
     case PED_PARTITION_LEGACY_BOOT:
       return gpt_part_data->legacy_boot;
+    case PED_PARTITION_PREP:
+      return gpt_part_data->prep;
     case PED_PARTITION_SWAP:
     case PED_PARTITION_LBA:
     case PED_PARTITION_ROOT:
@@ -1696,6 +1732,7 @@ gpt_partition_is_flag_available (const P
     case PED_PARTITION_APPLE_TV_RECOVERY:
     case PED_PARTITION_HIDDEN:
     case PED_PARTITION_LEGACY_BOOT:
+    case PED_PARTITION_PREP:
       return 1;
     case PED_PARTITION_SWAP:
     case PED_PARTITION_ROOT:
diff -rupN a/NEWS b/NEWS
--- a/NEWS	2014-03-19 14:09:38.501115606 -0400
+++ b/NEWS	2014-03-19 14:09:28.251062101 -0400
@@ -54,6 +54,9 @@ GNU parted NEWS
   Add ped_disk_get_partition_alignment() function to libparted to get
   information about alignment enforced by the disk type.
 
+  Add support for prep flag to GPT to select PowerPC Reference Platform
+  boot partition type.
+
 ** Bug fixes
 
   libparted: raise the limit on the maximum start sector and the
